use std::collections::{HashSet, VecDeque};
use std::fmt::{Debug, Error, Formatter, Write};

pub fn solve_part_1() {
    let steps = solve(Grid::from_str(input().as_str()));
    println!("Steps: {}", steps);
}

pub fn solve_part_2() {
    let steps = solve(Grid::from_str(input2().as_str()));
    println!("Steps: {}", steps);
}

fn solve(grid: Grid) -> u32 {
    let mut best_distance = u32::MAX;
    let mut states = VecDeque::new();
    states.push_back((grid.initial_state(), 0));

    let mut iterations = 0;
    let mut pruned_states = 0;

    while let Some(state) = states.pop_front() {
        let reachable_keys = state.0.reachable_keys();
        if reachable_keys.is_empty() {
            if state.1 < best_distance {
                best_distance = state.1;
            }
        } else {
            for rk in reachable_keys {
                let new_state = state.0.collect_key_at(&rk);
                let similar_state = states.iter().position(|(s, _)| {
                    s.collected_keys == new_state.collected_keys
                        && s.current_positions == new_state.current_positions
                });
                if similar_state.is_some() {
                    let x = states.get_mut(similar_state.unwrap()).unwrap();
                    // println!("Pruning similar states: {:?} and {:?}", x, (new_state, state.1 + rk.distance));
                    pruned_states += 1;
                    if state.1 + rk.distance < x.1 {
                        x.1 = state.1 + rk.distance;
                    }
                } else {
                    states.push_back((new_state, state.1 + rk.distance));
                }
            }
        }
        if iterations % 100 == 0 {
            println!("States: {}, Pruned states: {}", states.len(), pruned_states);
        }
        iterations += 1;
    }
    best_distance
}

// fn solve_part_2(grids: Vec<Grid>) -> u32 {
//     let mut best_distance = u32::MAX;
//     let mut states: VecDeque<(Vec<GridState>, u32)> = VecDeque::new();
//     states.push_back((grids.iter().map(|g| g.initial_state()).collect(), 0));
//
//     let mut iterations = 0;
//     let mut pruned_states = 0;
//
//     while let Some(state) = states.pop_front() {
//         let mut end_state = true;
//         for gsi in 0..state.0.len() {
//             let gs = state.0.get(gsi).unwrap();
//             let reachable_keys = gs.reachable_keys();
//             for rk in reachable_keys {
//                 //Some pruning
//                 end_state = false;
//
//                 let new_distance = state.1 + rk.distance;
//                 states.push_back((
//                     state
//                         .0
//                         .iter()
//                         .enumerate()
//                         .map(move |(i, s)| if i == gsi { gs.collect_key_at(rk.position) } else { s.clone() })
//                         .collect(),
//                     new_distance,
//                 ));
//             }
//         }
//         if end_state {
//             if state.1 < best_distance {
//                 best_distance = state.1;
//             }
//         }
//     }
//     best_distance
// }

#[derive(Debug, Eq, PartialEq)]
struct ReachableKey {
    key: char,
    position: (usize, usize),
    from_position: (usize, usize),
    distance: u32,
}

struct Grid {
    grid: Vec<Vec<char>>,
    current_positions: Vec<(usize, usize)>,
}

#[derive(Clone)]
struct GridState<'a> {
    grid: &'a Grid,
    current_positions: Vec<(usize, usize)>,
    collected_keys: HashSet<char>,
}

impl<'a> Debug for GridState<'a> {
    fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error> {
        writeln!(f, "Positions: {:?}", self.current_positions)?;
        writeln!(f, "Keys: {:?}", self.collected_keys)?;
        Ok(())
    }
}

struct TileQueue {
    position: (usize, usize),
    from_position: (usize, usize),
    distance: u32,
}

impl<'a> GridState<'a> {
    fn reachable_keys(&'a self) -> Vec<ReachableKey> {
        let mut queue: VecDeque<TileQueue> = VecDeque::new();
        let mut visited: HashSet<(usize, usize)> = HashSet::new();
        for cp in self.current_positions.iter() {
            queue.push_back(TileQueue {
                from_position: *cp,
                position: *cp,
                distance: 0,
            });
        }
        let mut reachable_keys = Vec::new();

        while let Some(current) = queue.pop_front() {
            visited.insert(current.position);

            let current_value = self.grid.grid[current.position.0][current.position.1];
            if current_value.is_alphabetic() && !self.collected_keys.contains(&current_value) {
                if current_value.is_lowercase() {
                    reachable_keys.push(ReachableKey {
                        key: current_value,
                        position: current.position,
                        from_position: current.from_position,
                        distance: current.distance,
                    });
                }
            } else {
                for n in self.grid.neighbours(current.position) {
                    if !visited.contains(&n) {
                        queue.push_back(TileQueue {
                            position: n,
                            from_position: current.from_position,
                            distance: current.distance + 1,
                        });
                    }
                }
            }
        }

        reachable_keys
    }

    fn collect_key_at(&self, position: &ReachableKey) -> GridState<'a> {
        let key = self.grid.grid[position.position.0][position.position.1];
        let mut collected_keys = self.collected_keys.clone();
        collected_keys.insert(key);
        collected_keys.insert(key.to_uppercase().next().unwrap());
        let new_positions = self
            .current_positions
            .iter()
            .map(|cp| {
                if position.from_position == *cp {
                    position.position
                } else {
                    *cp
                }
            })
            .collect();

        GridState {
            grid: self.grid,
            current_positions: new_positions,
            collected_keys,
        }
    }
}

impl Grid {
    fn from_str(input: &str) -> Grid {
        let mut grid = vec![Vec::new()];
        let mut current_positions = Vec::new();
        let mut row = 0;
        let mut col = 0;
        for c in input.chars() {
            if c == '\n' {
                grid.push(Vec::new());
                row += 1;
                col = 0;
            } else if c == '@' {
                current_positions.push((row, col));
                grid.last_mut().unwrap().push('.');
                col += 1;
            } else {
                grid.last_mut().unwrap().push(c);
                col += 1;
            }
        }
        Grid {
            grid,
            current_positions,
        }
    }

    fn initial_state(&self) -> GridState {
        GridState {
            grid: self,
            current_positions: self.current_positions.clone(),
            collected_keys: HashSet::new(),
        }
    }

    fn neighbours(&self, position: (usize, usize)) -> Vec<(usize, usize)> {
        let height = self.grid.len();
        let width = self.grid[0].len();

        let mut neighbours = Vec::new();
        if position.0 > 0 && self.grid[position.0 - 1][position.1] != '#' {
            neighbours.push((position.0 - 1, position.1));
        }
        if position.1 < width - 1 && self.grid[position.0][position.1 + 1] != '#' {
            neighbours.push((position.0, position.1 + 1));
        }
        if position.0 < height - 1 && self.grid[position.0 + 1][position.1] != '#' {
            neighbours.push((position.0 + 1, position.1));
        }
        if position.1 > 0 && self.grid[position.0][position.1 - 1] != '#' {
            neighbours.push((position.0, position.1 - 1));
        }
        return neighbours;
    }
}

impl Debug for Grid {
    fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error> {
        for row in self.grid.iter() {
            for &tile in row {
                f.write_char(tile)?;
            }
            f.write_char('\n')?;
        }
        Ok(())
    }
}

#[cfg(test)]
mod test {
    use crate::prob18::{input, solve, Grid, ReachableKey, input2};

    #[test]
    fn test() {
        let input = "########################
#...............b.C.D.f#
#.######################
#.....@.a.B.c.d.A.e.F.g#
########################";

        let grid = Grid::from_str(input);

        assert_eq!(grid.current_positions, vec!((3, 6)));
        assert_eq!(grid.neighbours((3,6)), vec![(3, 7), (3, 5)]);
        assert_eq!(grid.neighbours((3, 5)), vec![(3, 6), (3, 4)]);
        assert_eq!(
            grid.initial_state().reachable_keys(),
            vec![
                ReachableKey {
                    key: 'a',
                    position: (3, 8),
                    from_position: (3,6),
                    distance: 2,
                },
                ReachableKey {
                    key: 'b',
                    position: (1, 16),
                    from_position: (3,6),
                    distance: 22,
                }
            ]
        );
        println!("{:?}", grid);
    }

    #[test]
    fn collect_key_at() {
        let input = "########################
#...............b.C.D.f#
#.######################
#.....@.a.B.c.d.A.e.F.g#
########################";

        let grid = Grid::from_str(input);
        assert_eq!(
            grid.initial_state()
                .collect_key_at(&ReachableKey{ key: 'a', from_position: (3, 6), position: (3, 8), distance: 2 })
                .collect_key_at(&ReachableKey{ key: 'b', from_position: (3,8), position: (1, 16), distance: 24 })
                .reachable_keys(),
            vec![ReachableKey {
                key: 'c',
                position: (3, 12),
                from_position: (1,16),
                distance: 28,
            }]
        );
    }

    #[test]
    fn solve_example_1() {
        let input = "########################
#...............b.C.D.f#
#.######################
#.....@.a.B.c.d.A.e.F.g#
########################";

        let grid = Grid::from_str(input);

        assert_eq!(solve(grid), 132);
    }

    #[test]
    fn solve_example_2() {
        let input = "#################
#i.G..c...e..H.p#
########.########
#j.A..b...f..D.o#
########@########
#k.E..a...g..B.n#
########.########
#l.F..d...h..C.m#
#################";

        let grid = Grid::from_str(input);

        assert_eq!(solve(grid), 136);
    }

    #[test]
    fn test_solve_part_1() {
        let grid = Grid::from_str(input().as_str());
        println!("{}", solve(grid));
    }

    #[test]
    fn test_solve_part_2() {
        let grid = Grid::from_str(input2().as_str());
        println!("{}", solve(grid));
    }

    #[test]
    fn test_part_2_example_1() {
        let input = "#############
#DcBa.#.GhKl#
#.###@#@#I###
#e#d#####j#k#
###C#@#@###J#
#fEbA.#.FgHi#
#############";

        let grid = Grid::from_str(input);
        assert_eq!(super::solve(grid), 32);
    }

    #[test]
    fn test_part_2_example_2() {
        let input = "#############
#g#f.D#..h#l#
#F###e#E###.#
#dCba@#@BcIJ#
#############
#nK.L@#@G...#
#M###N#H###.#
#o#m..#i#jk.#
#############";

        let grid = Grid::from_str(input);
        assert_eq!(super::solve(grid), 72);
    }

    #[test]
    fn test2() {
        let grid = Grid::from_str("#############
#DcBa.#.GhKl#
#.###@#@#I###
#e#d#####j#k#
###C#@#@###J#
#fEbA.#.FgHi#
#############");

        let mut state = grid.initial_state();
        state.collected_keys.insert('F');
        assert_eq!(state.reachable_keys()[1],
            ReachableKey {
                key: 'g',
                from_position: (4, 7),
                position: (5, 9),
                distance: 3
            }
        );
    }
}

fn input() -> String {
    String::from(
        "#################################################################################
#.................#...#.#...............#...#.........#.......#.......#.....#...#
#######.#.#######.#.#.#.#.#######.#######.#.#.###.#####.#####.#.#.###C###.#.#.#.#
#.E...#.#.#.....#...#...#.#.....#.......#.#.#t#.#.....#.#...#...#.#.#.#...#.#.#.#
#.###.###.#.###.#######.#.#.###.#######.#.###.#.#####.#.#.#.#####.#.#.#.###.#.#.#
#.#.......#...#...#...#.#.#.#.......#...#.#.........#...#.#.....#f#.....#...#a#.#
#.#########.#.#####.#.#.#.###.#####.#.###.#.#######.#####.#.###.#.#######.###.###
#...#.....#.#.....#.#...#...#.#.....#...#...#...#.#.....#.#...#.#...#h..#...#...#
#.#.#.###.#####.#.#.#######.#.#.#######.#.###.#.#.#####.###.#.#####.#.#.###.###.#
#.#.#...#.....#.#...#...#...#.#...#...#.#...#.#.#.....#...#.#.#.....#.#...#.L.#.#
###.#.#######.#.#####.#.#.###.###.###.#.#####.#.#.###.###.###.#.#####.###.###.#.#
#...#.#...#...#...#...#.#...#...#.....#.#...#.#.#...#.........#.#.......#...#...#
#.###.#.#.#.#####.#.###.###.#.#.#####.#.#.#.#.#.###.###########.#.#####.###.###.#
#.....#.#...#.....#...#...#.#.#.#.....#.#.#...#.#.....#.....#...#...#.#.#...#...#
#.#####.###.#####.###.###.#.###.#.#####.#.#####.#.#####.###.#.#####.#.#.###.#.###
#...#.#...#.#...#.#...#.#.#.#...#.....#.#.#.....#.#.....#...#...#.#.#.#...#.#...#
###.#.###.###.#.###.###.#.#.#.#.#######.#.#.#######.#####.#####.#.#.#.###.#####.#
#.#.....#.....#.....#...#.#...#.#.......#.#.......#...#.#.#.....#.#.#...#.......#
#.#####.#############.#.#.#.#####.#####.#.#######.###.#.#.###.###.#.#.###########
#.....#.#.#...........#.#...#.....#.....#.#...#...#...#.#.....#...#.#...........#
#.#.###.#.#.#.#####.#########.#####.#####.#.#.#.###.###.#.#####.#.#.###.#########
#.#.#...#...#.....#.#.......#.#.........#...#.#.....#.....#.X.#.#.#...#.#...#...#
###.#.###########.#########.#.#########.#.###.#######.#####.###.#####D#.#.#.#.#.#
#...#.#...........#.......#.#.....#.....#...#...#...#...#.#...#.......#...#...#.#
#.#.#.###.#######.#.#.#.###.#.###.#####.#.#####.###.###.#.###.#######.###.#####.#
#.#.#....k#...#...#.#.#.#...#...#.....#.#.#.....#.....#.#...#.#...V.#...#...#...#
#.#.#########.#.###.#.#.#.#####.#####.###.#.#####.#####.###.#.#.###.###.###.#.###
#.#...#.......#.#...#.#.#...#.......#...#.#.#.....#.....#...#...#...#.#.#.#.#...#
#.###.#.#######.#.###.#####.#.#########.#.#.###.#.#.#####.#######.###.#.#.#.###.#
#...#...#.......#.#.#.....#.#.#.#.......#.#.#...#.#.#.#...#.......#...R.#...#...#
#.#.#####.#######.#.#####.#.#.#.#.#####.###.#.#####.#.#.#.#W#######.#####S###.#.#
#.#......j#...#...#...I.#...#...#.#.....#...#.......#...#.#.#.....#...#.#.#.#.#.#
#.#########.###.###.###.#########.#####.#.#######.#######.#.#.###.###.#.#.#.#.#.#
#.......#.....#.....#.#.#...#.....#...#.#.......#.........#...#.#.#.#.#.#.#.#.#.#
#######.###.#.#######U#.#.#.#.#####.#.#########.###.###########.#.#.#.#.#.#.#.###
#...Y.#...#.#.........#...#.#.......#...#.#...#.#...#.............#.#.#.....#...#
#.#######.#.###.#####.#####.#########.#.#.#.#.#.#####.#############.#.#########B#
#...#.Q...#.#...#.#...#...#.#...#...#.#.#...#.#.......#i..#.....#...#.........#.#
#.#.#.#######.###.#.#####.#.#.#.#.#.###.#.###.#########.#.#.#.###.#.#########.#.#
#.#...........#p..........#...#...#.........#...........#...#.....#...N.........#
#######################################.@.#######################################
#.#.....#.#.........#.........#.....#.......#...#.......#...#.....#...G.....#...#
#.#.#.#.#.#.#####.#.#######.#.#.###.#.###.#.#.#.#.#####.#.###.###.#.#####.#.#.#.#
#...#r#.#.#.#...#n#.........#...#.#.#...#.#.#.#.#...#...#...#.#.#...#...#.#...#.#
#.###.#.#.#.#.###.###############.#.###.#.#.#.#.#.#.#.#####.#.#.#######.#.#####.#
#.#d#.#.#.....#...#.........#.....#.....#.#..m#.#.#.#.....#.#.#.....#...#...#...#
#.#.#.#.#######.#########.###.#.#######.#.#####.#.#.#####.#.#.###.#.#.#####.#.###
#...#.#.#..b....#.....#...#...#.#.....#.#.#...#.#.#.#.......#.....#...#.....#...#
#.###.#.#.#######.###.#.###.###.#.###.#.#.#.#.#.#.#.#################.#.#######.#
#.#...#...#.......#...#.#...#.#...#.#...#.#.#.#.#.#.#.....#.......#...#...#.K.#.#
###.#######.###.###.###.#.###.#####.#####.#.#.#.#.#.#.###.#.#####.#.#####.#.#.#.#
#...#.......#.#...#.....#...#.......#...#.#.#...#.#.#.#.#...#...#.....#...#.#.#.#
#.#####.#####.###.#####.###.###.#.#.###.#.###.#####.#.#.#####.#########.###.###.#
#.#...#..z#.....#...#.#.#.#...#.#.#.....#...#.#.....#.....#...#.........#.....#.#
#.#.#.###.###.#.###.#.#.#.###.###.#####.###.#.#.#.#######.###.#.#########.###.#.#
#.#.#..s#.....#.#...#.......#...#.#.#...#...#...#.#.....#.....#...#.#.....#.#.#.#
#.#.###.#######.#.#############.#.#.#.###.#########.#.#######.###.#.#.#####.#.#.#
#.....#.#.....#.#.............#...#...#.#.M...#.....#...#...#.#...#...#.....#...#
#######.#.###.#######.#####.#.#####.###.#####.#.#######.#.#.#.#.#####.###.#.#####
#...#...#.#.#.......#.....#.#...#...#...#.....#.#.....#.#.#...#.....#.....#...#.#
#O###.###.#.#######.###.###.#####.#####.#.#####.#.###.#.#.#####.###.#########.#.#
#...#.....#.....#...#.#.#...#.....#.....#.....#...#.#.#.#...#.#...#......o#...#.#
###.#########.#.#.#.#.#.#.#.#.#######.#.#####.#####.#.#.###.#.###.#######.#.###J#
#...#.........#.#.#.#.#.#.#.#.#.......#.#.......#.....#.#...#..x#.#.....#.#.....#
#.#.#.#########.#.###.#.#.###.###.#.#####.#####.#.#####.#.#####.#.#.#####.#.#####
#.#...#....g#.#.#.....#.#...#...#.#.....#.....#.#.#...#.....#...#...#.....#.#...#
#.###.#.###.#.#.###########.###.#######.#.###.###.#.#######.#.#####.#.###.###.#.#
#.#.#.#...#.#.................#.#...#...#.#.#.....#.#....v#.#.#.....#.#.#.#...#.#
#.#.#.###.#.###########.#####.#.#.#.#.#.#.#.#######.#.###.###.#.#####.#.#.#.###.#
#.#.#...#.#...F...#.....#...#.#.#.#...#.#.#.....#...#...#.....#.....#.#...#q#.#.#
#.#.###.#.#######.#.#####.#.###.#.#######.###.#.#.#.###.###########.#.#####.#.#.#
#.#...#.#.#...#...#.#...#.#.....#.......#.....#...#.#.#w#.........#.#.....#.#.#.#
#.#.#.#.#.#.#.#.#.###.#.#.#########.###.###########.#.#.#.#.#####.#######.#.#.#.#
#.#.#...#.#.#...#.#...#.#...#.....#...#.#...#.......#.#.#.#.#...#.P.#...#.#...#y#
#.#######.#.#.#####.###.###.#.###.#####.#.###.#######.#.###.#.#.###.#.#.#.#.###.#
#.#.....#.#c#.#...#.#l..#...#...#.#.A.#.#.....#.......#...Z.#.#...#.#.#.#...#...#
#.#.###T#.#.###.#.#.#.###.###.#.#.#.#.#.#.#########.#.###########.#.#.#.#####.###
#.#...#.#.#.....#...#...#.H.#.#.#.#.#...#...#.......#.....#.......#...#.....#..u#
#.###.#.#.#############.###.###.#.#.###.###.###.#########.###.###.#########.###.#
#.....#..........e....#.........#...#...#.......#.............#...........#.....#
#################################################################################",
    )
}


fn input2() -> String {
    String::from(
        "#################################################################################
#.................#...#.#...............#...#.........#.......#.......#.....#...#
#######.#.#######.#.#.#.#.#######.#######.#.#.###.#####.#####.#.#.###C###.#.#.#.#
#.E...#.#.#.....#...#...#.#.....#.......#.#.#t#.#.....#.#...#...#.#.#.#...#.#.#.#
#.###.###.#.###.#######.#.#.###.#######.#.###.#.#####.#.#.#.#####.#.#.#.###.#.#.#
#.#.......#...#...#...#.#.#.#.......#...#.#.........#...#.#.....#f#.....#...#a#.#
#.#########.#.#####.#.#.#.###.#####.#.###.#.#######.#####.#.###.#.#######.###.###
#...#.....#.#.....#.#...#...#.#.....#...#...#...#.#.....#.#...#.#...#h..#...#...#
#.#.#.###.#####.#.#.#######.#.#.#######.#.###.#.#.#####.###.#.#####.#.#.###.###.#
#.#.#...#.....#.#...#...#...#.#...#...#.#...#.#.#.....#...#.#.#.....#.#...#.L.#.#
###.#.#######.#.#####.#.#.###.###.###.#.#####.#.#.###.###.###.#.#####.###.###.#.#
#...#.#...#...#...#...#.#...#...#.....#.#...#.#.#...#.........#.#.......#...#...#
#.###.#.#.#.#####.#.###.###.#.#.#####.#.#.#.#.#.###.###########.#.#####.###.###.#
#.....#.#...#.....#...#...#.#.#.#.....#.#.#...#.#.....#.....#...#...#.#.#...#...#
#.#####.###.#####.###.###.#.###.#.#####.#.#####.#.#####.###.#.#####.#.#.###.#.###
#...#.#...#.#...#.#...#.#.#.#...#.....#.#.#.....#.#.....#...#...#.#.#.#...#.#...#
###.#.###.###.#.###.###.#.#.#.#.#######.#.#.#######.#####.#####.#.#.#.###.#####.#
#.#.....#.....#.....#...#.#...#.#.......#.#.......#...#.#.#.....#.#.#...#.......#
#.#####.#############.#.#.#.#####.#####.#.#######.###.#.#.###.###.#.#.###########
#.....#.#.#...........#.#...#.....#.....#.#...#...#...#.#.....#...#.#...........#
#.#.###.#.#.#.#####.#########.#####.#####.#.#.#.###.###.#.#####.#.#.###.#########
#.#.#...#...#.....#.#.......#.#.........#...#.#.....#.....#.X.#.#.#...#.#...#...#
###.#.###########.#########.#.#########.#.###.#######.#####.###.#####D#.#.#.#.#.#
#...#.#...........#.......#.#.....#.....#...#...#...#...#.#...#.......#...#...#.#
#.#.#.###.#######.#.#.#.###.#.###.#####.#.#####.###.###.#.###.#######.###.#####.#
#.#.#....k#...#...#.#.#.#...#...#.....#.#.#.....#.....#.#...#.#...V.#...#...#...#
#.#.#########.#.###.#.#.#.#####.#####.###.#.#####.#####.###.#.#.###.###.###.#.###
#.#...#.......#.#...#.#.#...#.......#...#.#.#.....#.....#...#...#...#.#.#.#.#...#
#.###.#.#######.#.###.#####.#.#########.#.#.###.#.#.#####.#######.###.#.#.#.###.#
#...#...#.......#.#.#.....#.#.#.#.......#.#.#...#.#.#.#...#.......#...R.#...#...#
#.#.#####.#######.#.#####.#.#.#.#.#####.###.#.#####.#.#.#.#W#######.#####S###.#.#
#.#......j#...#...#...I.#...#...#.#.....#...#.......#...#.#.#.....#...#.#.#.#.#.#
#.#########.###.###.###.#########.#####.#.#######.#######.#.#.###.###.#.#.#.#.#.#
#.......#.....#.....#.#.#...#.....#...#.#.......#.........#...#.#.#.#.#.#.#.#.#.#
#######.###.#.#######U#.#.#.#.#####.#.#########.###.###########.#.#.#.#.#.#.#.###
#...Y.#...#.#.........#...#.#.......#...#.#...#.#...#.............#.#.#.....#...#
#.#######.#.###.#####.#####.#########.#.#.#.#.#.#####.#############.#.#########B#
#...#.Q...#.#...#.#...#...#.#...#...#.#.#...#.#.......#i..#.....#...#.........#.#
#.#.#.#######.###.#.#####.#.#.#.#.#.###.#.###.#########.#.#.#.###.#.#########.#.#
#.#...........#p..........#...#...#....@#@..#...........#...#.....#...N.........#
#################################################################################
#.#.....#.#.........#.........#.....#..@#@..#...#.......#...#.....#...G.....#...#
#.#.#.#.#.#.#####.#.#######.#.#.###.#.###.#.#.#.#.#####.#.###.###.#.#####.#.#.#.#
#...#r#.#.#.#...#n#.........#...#.#.#...#.#.#.#.#...#...#...#.#.#...#...#.#...#.#
#.###.#.#.#.#.###.###############.#.###.#.#.#.#.#.#.#.#####.#.#.#######.#.#####.#
#.#d#.#.#.....#...#.........#.....#.....#.#..m#.#.#.#.....#.#.#.....#...#...#...#
#.#.#.#.#######.#########.###.#.#######.#.#####.#.#.#####.#.#.###.#.#.#####.#.###
#...#.#.#..b....#.....#...#...#.#.....#.#.#...#.#.#.#.......#.....#...#.....#...#
#.###.#.#.#######.###.#.###.###.#.###.#.#.#.#.#.#.#.#################.#.#######.#
#.#...#...#.......#...#.#...#.#...#.#...#.#.#.#.#.#.#.....#.......#...#...#.K.#.#
###.#######.###.###.###.#.###.#####.#####.#.#.#.#.#.#.###.#.#####.#.#####.#.#.#.#
#...#.......#.#...#.....#...#.......#...#.#.#...#.#.#.#.#...#...#.....#...#.#.#.#
#.#####.#####.###.#####.###.###.#.#.###.#.###.#####.#.#.#####.#########.###.###.#
#.#...#..z#.....#...#.#.#.#...#.#.#.....#...#.#.....#.....#...#.........#.....#.#
#.#.#.###.###.#.###.#.#.#.###.###.#####.###.#.#.#.#######.###.#.#########.###.#.#
#.#.#..s#.....#.#...#.......#...#.#.#...#...#...#.#.....#.....#...#.#.....#.#.#.#
#.#.###.#######.#.#############.#.#.#.###.#########.#.#######.###.#.#.#####.#.#.#
#.....#.#.....#.#.............#...#...#.#.M...#.....#...#...#.#...#...#.....#...#
#######.#.###.#######.#####.#.#####.###.#####.#.#######.#.#.#.#.#####.###.#.#####
#...#...#.#.#.......#.....#.#...#...#...#.....#.#.....#.#.#...#.....#.....#...#.#
#O###.###.#.#######.###.###.#####.#####.#.#####.#.###.#.#.#####.###.#########.#.#
#...#.....#.....#...#.#.#...#.....#.....#.....#...#.#.#.#...#.#...#......o#...#.#
###.#########.#.#.#.#.#.#.#.#.#######.#.#####.#####.#.#.###.#.###.#######.#.###J#
#...#.........#.#.#.#.#.#.#.#.#.......#.#.......#.....#.#...#..x#.#.....#.#.....#
#.#.#.#########.#.###.#.#.###.###.#.#####.#####.#.#####.#.#####.#.#.#####.#.#####
#.#...#....g#.#.#.....#.#...#...#.#.....#.....#.#.#...#.....#...#...#.....#.#...#
#.###.#.###.#.#.###########.###.#######.#.###.###.#.#######.#.#####.#.###.###.#.#
#.#.#.#...#.#.................#.#...#...#.#.#.....#.#....v#.#.#.....#.#.#.#...#.#
#.#.#.###.#.###########.#####.#.#.#.#.#.#.#.#######.#.###.###.#.#####.#.#.#.###.#
#.#.#...#.#...F...#.....#...#.#.#.#...#.#.#.....#...#...#.....#.....#.#...#q#.#.#
#.#.###.#.#######.#.#####.#.###.#.#######.###.#.#.#.###.###########.#.#####.#.#.#
#.#...#.#.#...#...#.#...#.#.....#.......#.....#...#.#.#w#.........#.#.....#.#.#.#
#.#.#.#.#.#.#.#.#.###.#.#.#########.###.###########.#.#.#.#.#####.#######.#.#.#.#
#.#.#...#.#.#...#.#...#.#...#.....#...#.#...#.......#.#.#.#.#...#.P.#...#.#...#y#
#.#######.#.#.#####.###.###.#.###.#####.#.###.#######.#.###.#.#.###.#.#.#.#.###.#
#.#.....#.#c#.#...#.#l..#...#...#.#.A.#.#.....#.......#...Z.#.#...#.#.#.#...#...#
#.#.###T#.#.###.#.#.#.###.###.#.#.#.#.#.#.#########.#.###########.#.#.#.#####.###
#.#...#.#.#.....#...#...#.H.#.#.#.#.#...#...#.......#.....#.......#...#.....#..u#
#.###.#.#.#############.###.###.#.#.###.###.###.#########.###.###.#########.###.#
#.....#..........e....#.........#...#...#.......#.............#...........#.....#
#################################################################################",
    )
}
