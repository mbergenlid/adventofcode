use crate::intcode::IntCode;
use std::collections::HashMap;
use std::sync::mpsc::channel;

#[derive(PartialEq, Eq, Hash, Debug, Copy, Clone)]
struct Cell {
    row: i32,
    col: i32,
}

impl Cell {
    fn move_in(&mut self, dir: &Direction) {
        match dir {
            Direction::Up => self.row -= 1,
            Direction::Down => self.row += 1,
            Direction::Left => self.col -= 1,
            Direction::Right => self.col += 1,
        }
    }
}

type Color = u8;

enum Direction {
    Up,
    Down,
    Left,
    Right,
}

impl Direction {
    fn turn_left(&self) -> Direction {
        match self {
            Direction::Up => Direction::Left,
            Direction::Down => Direction::Right,
            Direction::Left => Direction::Down,
            Direction::Right => Direction::Up,
        }
    }
    fn turn_right(&self) -> Direction {
        match self {
            Direction::Up => Direction::Right,
            Direction::Down => Direction::Left,
            Direction::Left => Direction::Up,
            Direction::Right => Direction::Down,
        }
    }
}

pub fn solve_part_1() {
    let (in_sender, in_receiver) = channel();
    let (out_sender, out_receiver) = channel();

    let code = painting_robot_code();
    code.run_async(in_receiver, out_sender);

    let mut grid: HashMap<Cell, Color> = HashMap::new();
    let mut current_cell = Cell { row: 0, col: 0 };
    let mut direction = Direction::Up;

    in_sender.send(0).unwrap();

    for color_to_paint in out_receiver.iter() {
        let turn = out_receiver.recv().unwrap();

        grid.insert(current_cell, color_to_paint as Color);
        direction = if turn == 0 {
            direction.turn_left()
        } else {
            direction.turn_right()
        };
        current_cell.move_in(&direction);
        let &color = grid.get(&current_cell).unwrap_or(&0);
        in_sender.send(color as i64).unwrap_or(());
    }

    println!("Part 1: {}", grid.len());
}

pub fn solve_part_2() {
    let (in_sender, in_receiver) = channel();
    let (out_sender, out_receiver) = channel();

    let code = painting_robot_code();
    code.run_async(in_receiver, out_sender);

    let mut grid: HashMap<Cell, Color> = HashMap::new();
    let mut current_cell = Cell { row: 0, col: 0 };
    let mut direction = Direction::Up;

    grid.insert(current_cell, 1);
    in_sender.send(1).unwrap();

    for color_to_paint in out_receiver.iter() {
        let turn = out_receiver.recv().unwrap();

        grid.insert(current_cell, color_to_paint as Color);
        direction = if turn == 0 {
            direction.turn_left()
        } else {
            direction.turn_right()
        };
        current_cell.move_in(&direction);
        let &color = grid.get(&current_cell).unwrap_or(&0);
        in_sender.send(color as i64).unwrap_or(());
    }

    let min_col = grid.keys().map(|c| c.col).min().unwrap();
    let max_col = grid.keys().map(|c| c.col).max().unwrap();
    let min_row = grid.keys().map(|c| c.row).min().unwrap();
    let max_row = grid.keys().map(|c| c.row).max().unwrap();

    println!("Part 2:");
    for row in min_row..(max_row + 1) {
        for col in min_col..(max_col + 1) {
            if *grid.get(&Cell { row: row, col: col }).unwrap_or(&0) == 1 {
                print!("#")
            } else {
                print!(" ")
            }
        }
        println!();
    }
}

fn painting_robot_code() -> IntCode {
    IntCode::new(vec![
        3,
        8,
        1005,
        8,
        319,
        1106,
        0,
        11,
        0,
        0,
        0,
        104,
        1,
        104,
        0,
        3,
        8,
        1002,
        8,
        -1,
        10,
        101,
        1,
        10,
        10,
        4,
        10,
        108,
        0,
        8,
        10,
        4,
        10,
        1002,
        8,
        1,
        28,
        3,
        8,
        1002,
        8,
        -1,
        10,
        1001,
        10,
        1,
        10,
        4,
        10,
        1008,
        8,
        1,
        10,
        4,
        10,
        102,
        1,
        8,
        51,
        2,
        1008,
        18,
        10,
        3,
        8,
        1002,
        8,
        -1,
        10,
        1001,
        10,
        1,
        10,
        4,
        10,
        1008,
        8,
        1,
        10,
        4,
        10,
        101,
        0,
        8,
        77,
        1,
        1006,
        8,
        10,
        1006,
        0,
        88,
        3,
        8,
        1002,
        8,
        -1,
        10,
        1001,
        10,
        1,
        10,
        4,
        10,
        1008,
        8,
        1,
        10,
        4,
        10,
        1002,
        8,
        1,
        106,
        1006,
        0,
        47,
        2,
        5,
        0,
        10,
        3,
        8,
        102,
        -1,
        8,
        10,
        101,
        1,
        10,
        10,
        4,
        10,
        1008,
        8,
        0,
        10,
        4,
        10,
        101,
        0,
        8,
        135,
        2,
        105,
        3,
        10,
        2,
        1101,
        6,
        10,
        3,
        8,
        102,
        -1,
        8,
        10,
        101,
        1,
        10,
        10,
        4,
        10,
        1008,
        8,
        0,
        10,
        4,
        10,
        1002,
        8,
        1,
        165,
        3,
        8,
        102,
        -1,
        8,
        10,
        101,
        1,
        10,
        10,
        4,
        10,
        108,
        0,
        8,
        10,
        4,
        10,
        1002,
        8,
        1,
        186,
        1,
        1009,
        11,
        10,
        1,
        9,
        3,
        10,
        2,
        1003,
        10,
        10,
        1,
        107,
        11,
        10,
        3,
        8,
        1002,
        8,
        -1,
        10,
        101,
        1,
        10,
        10,
        4,
        10,
        1008,
        8,
        1,
        10,
        4,
        10,
        1002,
        8,
        1,
        225,
        1006,
        0,
        25,
        1,
        1009,
        14,
        10,
        1,
        1008,
        3,
        10,
        3,
        8,
        102,
        -1,
        8,
        10,
        101,
        1,
        10,
        10,
        4,
        10,
        108,
        1,
        8,
        10,
        4,
        10,
        1002,
        8,
        1,
        257,
        1,
        1006,
        2,
        10,
        3,
        8,
        1002,
        8,
        -1,
        10,
        1001,
        10,
        1,
        10,
        4,
        10,
        1008,
        8,
        0,
        10,
        4,
        10,
        101,
        0,
        8,
        284,
        2,
        1004,
        7,
        10,
        1006,
        0,
        41,
        2,
        1106,
        17,
        10,
        1,
        104,
        3,
        10,
        101,
        1,
        9,
        9,
        1007,
        9,
        919,
        10,
        1005,
        10,
        15,
        99,
        109,
        641,
        104,
        0,
        104,
        1,
        21101,
        0,
        937108545948,
        1,
        21102,
        1,
        336,
        0,
        1105,
        1,
        440,
        21102,
        1,
        386577203612,
        1,
        21102,
        347,
        1,
        0,
        1105,
        1,
        440,
        3,
        10,
        104,
        0,
        104,
        1,
        3,
        10,
        104,
        0,
        104,
        0,
        3,
        10,
        104,
        0,
        104,
        1,
        3,
        10,
        104,
        0,
        104,
        1,
        3,
        10,
        104,
        0,
        104,
        0,
        3,
        10,
        104,
        0,
        104,
        1,
        21102,
        1,
        21478178819,
        1,
        21102,
        1,
        394,
        0,
        1106,
        0,
        440,
        21102,
        21477985447,
        1,
        1,
        21101,
        405,
        0,
        0,
        1105,
        1,
        440,
        3,
        10,
        104,
        0,
        104,
        0,
        3,
        10,
        104,
        0,
        104,
        0,
        21101,
        984458351460,
        0,
        1,
        21101,
        428,
        0,
        0,
        1106,
        0,
        440,
        21101,
        709048034148,
        0,
        1,
        21102,
        439,
        1,
        0,
        1106,
        0,
        440,
        99,
        109,
        2,
        21201,
        -1,
        0,
        1,
        21101,
        0,
        40,
        2,
        21101,
        471,
        0,
        3,
        21102,
        461,
        1,
        0,
        1105,
        1,
        504,
        109,
        -2,
        2106,
        0,
        0,
        0,
        1,
        0,
        0,
        1,
        109,
        2,
        3,
        10,
        204,
        -1,
        1001,
        466,
        467,
        482,
        4,
        0,
        1001,
        466,
        1,
        466,
        108,
        4,
        466,
        10,
        1006,
        10,
        498,
        1101,
        0,
        0,
        466,
        109,
        -2,
        2105,
        1,
        0,
        0,
        109,
        4,
        2101,
        0,
        -1,
        503,
        1207,
        -3,
        0,
        10,
        1006,
        10,
        521,
        21101,
        0,
        0,
        -3,
        22102,
        1,
        -3,
        1,
        21201,
        -2,
        0,
        2,
        21102,
        1,
        1,
        3,
        21102,
        540,
        1,
        0,
        1106,
        0,
        545,
        109,
        -4,
        2105,
        1,
        0,
        109,
        5,
        1207,
        -3,
        1,
        10,
        1006,
        10,
        568,
        2207,
        -4,
        -2,
        10,
        1006,
        10,
        568,
        22101,
        0,
        -4,
        -4,
        1105,
        1,
        636,
        21201,
        -4,
        0,
        1,
        21201,
        -3,
        -1,
        2,
        21202,
        -2,
        2,
        3,
        21102,
        587,
        1,
        0,
        1106,
        0,
        545,
        21202,
        1,
        1,
        -4,
        21102,
        1,
        1,
        -1,
        2207,
        -4,
        -2,
        10,
        1006,
        10,
        606,
        21101,
        0,
        0,
        -1,
        22202,
        -2,
        -1,
        -2,
        2107,
        0,
        -3,
        10,
        1006,
        10,
        628,
        22101,
        0,
        -1,
        1,
        21101,
        628,
        0,
        0,
        105,
        1,
        503,
        21202,
        -2,
        -1,
        -2,
        22201,
        -4,
        -2,
        -4,
        109,
        -5,
        2105,
        1,
        0,
    ])
}
