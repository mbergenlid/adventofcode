use crate::prob20::TileType::{Label, Passage};
use std::collections::{VecDeque, HashSet};

pub fn solve_part_1() {
    let maze = Maze::new(input1().as_str());
    let steps = solve_maze(maze);
    println!("Steps: {}", steps);
}

pub fn solve_part_2() {
    let maze = Maze::new_recursive(input1().as_str());
    let steps = solve_maze(maze);
    println!("Steps: {}", steps);
}

fn solve_maze(maze: Maze) -> u32 {
    let mut queue = VecDeque::new();
    queue.push_back(TileQueue { position: maze.start, steps: 0 });
    let mut visited = HashSet::new();
    visited.insert(maze.start);

    let mut total_steps = 0;
    while let Some(tile) = queue.pop_front() {
        visited.insert(tile.position);

        if tile.position == maze.goal {
            total_steps = tile.steps;
            break;
        }

        for neighbour in maze.neighbours(&tile.position) {
            if !visited.contains(&neighbour) {
                queue.push_back(TileQueue { position: neighbour, steps: tile.steps + 1 });
            }
        }
    }
    total_steps
}

struct TileQueue {
    position: Pos,
    steps: u32,
}

#[derive(Debug, Eq, PartialEq, Copy, Clone, Hash)]
struct Pos {
    row: usize,
    col: usize,
    level: u32,
}

impl Pos {
    fn new(row: usize, col: usize) -> Pos {
        Pos { col, row, level: 0 }
    }

    fn new_with_level(row: usize, col: usize, level: u32) -> Pos {
        Pos { col, row, level }
    }
}
#[derive(Debug, Eq, PartialEq)]
enum TileType {
    Empty,
    Label(char),
    Passage,
    Wall,
}

impl TileType {
    fn is_label(&self) -> bool {
        match self {
            Label(_) => true,
            _ => false,
        }
    }
}

#[derive(Debug, Eq, PartialEq)]
struct Tile {
    value: TileType,
    warp: Option<Pos>,
    visited: bool,
}

impl Tile {
    fn new(value: TileType) -> Tile {
        Tile { value, warp: None, visited: false }
    }

    #[allow(unused)]
    fn with_warp(mut self, position: Pos) -> Tile {
        self.warp = Some(position);
        self
    }
}

struct Maze {
    grid: Vec<Vec<Tile>>,
    width: usize,
    height: usize,
    start: Pos,
    goal: Pos,
    recursive: bool,
}

impl Maze {
    fn new(input: &str) -> Maze {
        let mut grid = vec![Vec::new()];
        let mut x = 0;
        let mut y = 0;
        let mut max_width = 0;
        for c in input.chars() {
            if c == '\n' {
                max_width = std::cmp::max(max_width, grid.last().unwrap().len());
                grid.push(Vec::new());
                y += 1;
                x = 0;
            } else if c.is_alphabetic() {
                grid.last_mut().unwrap().push(Tile::new(TileType::Label(c)));
                x += 1;
            } else {
                if c == '#' {
                    grid.last_mut().unwrap().push(Tile::new(TileType::Wall));
                } else if c == '.' {
                    grid.last_mut().unwrap().push(Tile::new(TileType::Passage));
                } else if c == ' ' {
                    grid.last_mut().unwrap().push(Tile::new(TileType::Empty));
                } else {
                    panic!("Unkown tile type {} at ({},{})", c, x, y);
                }
                x += 1;
            }
        }

        for row in grid.iter_mut() {
            if row.len() < max_width {
                for _ in row.len()..max_width {
                    row.push(Tile::new(TileType::Empty));
                }
            }
        }

        let height = grid.len();
        x = 0;
        y = 0;
        let mut warps: Vec<(_, Pos)> = Vec::new();
        for c in input.chars() {
            if c == '\n' {
                y += 1;
                x = 0;
            } else if c.is_alphabetic() {
                if y > 0 && grid[y - 1][x].value == Passage {
                    if let Label(other_label) = grid[y + 1][x].value {
                        warps.push(((c, other_label), Pos::new(y - 1, x)));
                    } else {
                        panic!("Fault maze");
                    }
                } else if x + 1 < max_width && grid[y][x + 1].value.is_label() {
                    if let Label(other_label) = grid[y][x + 1].value {
                        if x + 2 < max_width && grid[y][x + 2].value == Passage {
                            warps.push(((c, other_label), Pos::new(y, x + 2)));
                        } else if grid[y][x - 1].value == Passage {
                            warps.push(((c, other_label), Pos::new(y, x - 1)));
                        } else {
                            panic!("Faulty maze around ({},{})", y, x);
                        }
                    }
                } else if y < height - 2 {
                    if let Label(other_label) = grid[y + 1][x].value {
                        if grid[y + 2][x].value != Passage {
                            panic!("Faulty maze around ({},{})", y, x);
                        }
                        warps.push(((c, other_label), Pos::new(y + 2, x)));
                    }
                }
                x += 1;
            } else {
                x += 1;
            }
        }

        let mut start = None;
        let mut goal = None;
        for (label, position) in warps.iter() {
            if let Some(other_warp) = warps.iter().find(|(l, p)| l == label && p != position) {
                grid.get_mut(position.row)
                    .unwrap()
                    .get_mut(position.col)
                    .unwrap()
                    .warp = Some(other_warp.1);
            } else if *label == ('A', 'A') {
                start = Some(*position);
            } else if *label == ('Z', 'Z') {
                goal = Some(*position);
            }
        }

        Maze { grid, start: start.unwrap(), goal: goal.unwrap(), height, width: max_width, recursive: false }
    }

    fn new_recursive(input: &str) -> Maze {
        let mut maze = Maze::new(input);
        maze.recursive = true;
        maze
    }

    fn neighbours(&self, position: &Pos) -> Vec<Pos> {
        let height = self.height;
        let width = self.width;

        let mut neighbours: Vec<Pos> = Vec::new();
        if position.row > 0 && self.grid[position.row - 1][position.col].value == Passage {
            neighbours.push(Pos::new_with_level(position.row - 1, position.col, position.level));
        }
        if position.col < width - 1 && self.grid[position.row][position.col + 1].value == Passage {
            neighbours.push(Pos::new_with_level(position.row, position.col + 1, position.level));
        }
        if position.row < height - 1 && self.grid[position.row + 1][position.col].value == Passage {
            neighbours.push(Pos::new_with_level(position.row + 1, position.col, position.level));
        }
        if position.col > 0 && self.grid[position.row][position.col - 1].value == Passage {
            neighbours.push(Pos::new_with_level(position.row, position.col - 1, position.level));
        }

        if let Some(target) = self.grid[position.row][position.col].warp {
            if self.recursive {
                if position.row == 2 || position.row == self.height-3 || position.col == 2 || position.col == self.width-3 {
                    //outer warp
                    if position.level != 0 {
                        neighbours.push(Pos::new_with_level(target.row, target.col, position.level-1));
                    }
                } else {
                    //Inner warp
                    neighbours.push(Pos::new_with_level(target.row, target.col, position.level+1));
                }
            } else {
                neighbours.push(target);
            }
        }
        return neighbours;
    }

    // fn get(&self, position: &Pos) -> &Tile {
    //     self.grid.get(position.row)[position.row][position.col]
    // }
}

#[cfg(test)]
mod test {
    use super::Maze;
    use crate::prob20::{Tile, solve_maze, Pos};
    use crate::prob20::TileType::{Empty, Label, Passage, Wall};

    fn example_1_input() -> String {
        String::from(
            "         A         #
         A         #
  #######.#########
  #######.........#
  #######.#######.#
  #######.#######.#
  #######.#######.#
  #####  B    ###.#
BC...##  C    ###.#
  ##.##       ###.#
  ##...DE  F  ###.#
  #####    G  ###.#
  #########.#####.#
DE..#######...###.#
  #.#########.###.#
FG..#########.....#
  ###########.#####
             Z     #
             Z     #"
        )
    }
    #[test]
    fn build_maze() {
        let maze = Maze::new(
            "         A         #
         A         #
  #######.#########
  #######.........#
  #######.#######.#
  #######.#######.#
  #######.#######.#
  #####  B    ###.#
BC...##  C    ###.#
  ##.##       ###.#
  ##...DE  F  ###.#
  #####    G  ###.#
  #########.#####.#
DE..#######...###.#
  #.#########.###.#
FG..#########.....#
  ###########.#####
             Z     #
             Z     #",
        );

        assert_eq!(maze.grid[3][9], Tile::new(Passage));
        assert_eq!(maze.grid[3][8], Tile::new(Wall));
        assert_eq!(maze.grid[1][9], Tile::new(Label('A')));
        assert_eq!(maze.grid[1][10], Tile::new(Empty));

        assert_eq!(maze.grid[6][9], Tile::new(Passage).with_warp(Pos::new(8, 2)));
        assert_eq!(maze.grid[8][2], Tile::new(Passage).with_warp(Pos::new(6, 9)));

        assert_eq!(maze.grid[10][6], Tile::new(Passage).with_warp(Pos::new(13, 2)));
        assert_eq!(maze.grid[13][2], Tile::new(Passage).with_warp(Pos::new(10, 6)));

        assert_eq!(maze.grid[12][11], Tile::new(Passage).with_warp(Pos::new(15, 2)));
        assert_eq!(maze.grid[15][2], Tile::new(Passage).with_warp(Pos::new(12, 11)));

        assert_eq!(maze.start, Pos::new(2,9));
        assert_eq!(maze.goal, Pos::new(16,13));
    }

    #[test]
    fn neighbours() {
        let maze = Maze::new(
            "         A
         A
  #######.#########
  #######.........#
  #######.#######.#
  #######.#######.#
  #######.#######.#
  #####  B    ###.#
BC...##  C    ###.#
  ##.##       ###.#
  ##...DE  F  ###.#
  #####    G  ###.#
  #########.#####.#
DE..#######...###.#
  #.#########.###.#
FG..#########.....#
  ###########.#####
             Z
             Z",
        );

        assert_eq!(maze.neighbours(&Pos::new(6,9)), vec![Pos::new(5,9), Pos::new(8,2)]);
    }

    #[test]
    fn test_part_1_example_1() {
        let maze = Maze::new(
            "         A
         A
  #######.#########
  #######.........#
  #######.#######.#
  #######.#######.#
  #######.#######.#
  #####  B    ###.#
BC...##  C    ###.#
  ##.##       ###.#
  ##...DE  F  ###.#
  #####    G  ###.#
  #########.#####.#
DE..#######...###.#
  #.#########.###.#
FG..#########.....#
  ###########.#####
             Z
             Z",
        );

        assert_eq!(solve_maze(maze), 23);
    }

    #[test]
    fn test_part_1_example_2() {
        let maze = Maze::new(
            "                   A
                   A
  #################.#############
  #.#...#...................#.#.#
  #.#.#.###.###.###.#########.#.#
  #.#.#.......#...#.....#.#.#...#
  #.#########.###.#####.#.#.###.#
  #.............#.#.....#.......#
  ###.###########.###.#####.#.#.#
  #.....#        A   C    #.#.#.#
  #######        S   P    #####.#
  #.#...#                 #......VT
  #.#.#.#                 #.#####
  #...#.#               YN....#.#
  #.###.#                 #####.#
DI....#.#                 #.....#
  #####.#                 #.###.#
ZZ......#               QG....#..AS
  ###.###                 #######
JO..#.#.#                 #.....#
  #.#.#.#                 ###.#.#
  #...#..DI             BU....#..LF
  #####.#                 #.#####
YN......#               VT..#....QG
  #.###.#                 #.###.#
  #.#...#                 #.....#
  ###.###    J L     J    #.#.###
  #.....#    O F     P    #.#...#
  #.###.#####.#.#####.#####.###.#
  #...#.#.#...#.....#.....#.#...#
  #.#####.###.###.#.#.#########.#
  #...#.#.....#...#.#.#.#.....#.#
  #.###.#####.###.###.#.#.#######
  #.#.........#...#.............#
  #########.###.###.#############
           B   J   C
           U   P   P               ",
        );

        assert_eq!(solve_maze(maze), 58);
    }

    #[test]
    fn neighbours_with_recursion() {
        let maze = Maze::new_recursive(example_1_input().as_str());
        assert_eq!(maze.neighbours(&Pos::new(8,2)), vec![Pos::new(8,3)]);
        assert_eq!(maze.neighbours(&Pos::new(6,9)), vec![Pos::new(5,9), Pos::new_with_level(8,2,1)]);

        assert_eq!(maze.neighbours(&Pos::new_with_level(8,2, 2)), vec![Pos::new_with_level(8,3, 2), Pos::new_with_level(6,9,1)]);
    }

    #[test]
    fn test_part_2_example_1() {
        let maze = Maze::new_recursive(
            "             Z L X W       C
             Z P Q B       K
  ###########.#.#.#.#######.###############
  #...#.......#.#.......#.#.......#.#.#...#
  ###.#.#.#.#.#.#.#.###.#.#.#######.#.#.###
  #.#...#.#.#...#.#.#...#...#...#.#.......#
  #.###.#######.###.###.#.###.###.#.#######
  #...#.......#.#...#...#.............#...#
  #.#########.#######.#.#######.#######.###
  #...#.#    F       R I       Z    #.#.#.#
  #.###.#    D       E C       H    #.#.#.#
  #.#...#                           #...#.#
  #.###.#                           #.###.#
  #.#....OA                       WB..#.#..ZH
  #.###.#                           #.#.#.#
CJ......#                           #.....#
  #######                           #######
  #.#....CK                         #......IC
  #.###.#                           #.###.#
  #.....#                           #...#.#
  ###.###                           #.#.#.#
XF....#.#                         RF..#.#.#
  #####.#                           #######
  #......CJ                       NM..#...#
  ###.#.#                           #.###.#
RE....#.#                           #......RF
  ###.###        X   X       L      #.#.#.#
  #.....#        F   Q       P      #.#.#.#
  ###.###########.###.#######.#########.###
  #.....#...#.....#.......#...#.....#.#...#
  #####.#.###.#######.#######.###.###.#.#.#
  #.......#.......#.#.#.#.#...#...#...#.#.#
  #####.###.#####.#.#.#.#.###.###.#.###.###
  #.......#.....#.#...#...............#...#
  #############.#.#.###.###################
               A O F   N
               A A D   M                     "
        );

        // let maze = Maze::new_recursive(example_1_input().as_str());

        assert_eq!(maze.neighbours(&Pos::new(34,17)), vec![Pos::new(33,17)]);
        assert_eq!(solve_maze(maze), 396);
    }
}

fn input1() -> String {
    String::from(
"                                       L N           Q     O     W   M       F
                                       W G           V     W     F   Q       F
  #####################################.#.###########.#####.#####.###.#######.#######################################
  #.......#.#...........#...#.#.#.......#.....#.....#.....#.....#.#...#.....#.........#...#.....#.#.#.#...#.....#.#.#
  #.#####.#.###########.###.#.#.###.#########.###.#####.#######.#.###.#.#.#####.#######.###.#####.#.#.#.###.#####.#.#
  #...#.#.#...#.#.#.#...#...............#.....#.........#.....#.#.#.....#.#.............#.......#.#...#.#.....#.#...#
  ###.#.#####.#.#.#.###.###.#.#########.###.#####.#########.#.#.#.#######.###.#####.#######.#####.#.###.###.#.#.#.###
  #.#.#.........#...........#...#.......#.......#...#.......#...#.#...#.....#.#.#.#.#.#.#.....#.#.#...#...#.#.#.#.#.#
  #.#.###.#.###.###.#.#.#####.#####.###.#######.###.#######.#.###.#.#######.#.#.#.###.#.###.###.#.#.###.#.#.###.#.#.#
  #.....#.#...#.....#.#.#...#.#.....#.....#...#.#...#...#...#.#.......#.....#.........................#.#.#...#.#...#
  #.#.#########.###.###.###.###.###.#######.#.#.###.#.#.#.#########.#####.###.###.#.#.###.#.#######.###.###.###.#.###
  #.#.#.#.......#...#...#.......#.......#...#.....#...#.#.#.......#.#...#...#.#.#.#.#...#.#.#.#...#.........#.....#.#
  ###.#.#.#.###.###########.#######.#.###.###.#########.#.#.###.###.###.###.#.#.#############.###.#####.###.###.###.#
  #.#.#.#.#...#.#...........#...#...#.#.....#.#.#...#...#.....#.#...#.......#.......#.#.#.....#.#.....#.#.#.#.#.#...#
  #.#.#.###.###.#.#####.###.###.###.#####.#####.#.#.#.#########.#.#####.###.###.#####.#.#.#####.###.#####.###.#.#.###
  #.#...#...#...#.....#.#...#.........#.#.......#.#.....#.......#.#.....#.#...#.....#.#.#...........#...#.#.#.....#.#
  #.#.#.###########.###########.#.#.###.###.#####.###.###.#######.###.###.#.###.#####.#.#.###.###.#.#.###.#.###.###.#
  #...#.#.......#.....#.........#.#.....#.....#.#.#...#.......#...#.#.#.#.#.#.....#...#...#.....#.#.......#.#.....#.#
  ###.###.#.#######.###.###.#.###.###.###.#####.#.###.#####.#.###.#.#.#.#.###.#####.###.#.#######.#########.###.###.#
  #...#...#.#.......#...#...#.#.....#.#.#...#.....#.....#...#.#.....#...#...#...#.#.....#.......#...#.#.#.#.#.#.#.#.#
  ###.###.#####.###.#########.#######.#.#.#######.#######.#.#######.#.#####.#.###.#.#################.#.#.#.#.#.#.#.#
  #...#.#...#.#.#.#.#...#.#.#.#.#.......#.#.#.....#.#...#.#...#.....#.#.#.............#...#.#.....#.......#.#.#.#...#
  ###.#.#.###.###.#.###.#.#.###.###.###.#.#.#####.#.###.###.#####.#.#.#.###.#######.###.###.#.###.#.#.#.###.#.#.#.###
  #.#.#.#.#.#.....#.#.......#...#.#.#...#.#.#.#.......#.#...#.....#.#...#.#.#...#.....#.#.......#.#.#.#...#.....#.#.#
  #.#.#.#.#.###.###########.###.#.#.#####.#.#.#.###.###.#.#######.###.###.#.###.#.###.#.#.#.###.#######.###.#.#.#.#.#
  #.....#.........#.#.#...............#.....#.#.#...#...........#...#...#.#.#.....#.#.#.#.#.#.........#...#.#.#...#.#
  #.#####.#.#######.#.#######.###.###.#####.#.###.#######.#.#.###.###.###.#####.#.#.###.#.#.###.###.#####.#####.###.#
  #...#...#.....#.......#.....#...#.#...#...#.........#.#.#.#.#.....#.........#.#.........#...#...#.#.......#...#.#.#
  #.#######.#######.###.###.###.###.#.#####.#######.###.#.#######.###.#############.#######.#########.#######.###.#.#
  #...#.....#.#.....#...#.#.#...#.#.#.....#.#.......#.#.........#.#.#.....#.......#.#.#...#...#.#...#...#.#...#.#.#.#
  ###.###.###.#####.#####.#######.#.#.###.#.#####.###.#####.#.###.#.###.#####.###.#.#.#.#######.###.#.#.#.###.#.#.#.#
  #.....#.#...#.....#.....#.............#.#.....#.........#.#.#.....#.....#.....#.......#.#...#...#.#.#...#...#.#...#
  ###.#.#.#.#.#####.#####.#.###.#######.#####.#######.#######.#####.###.#####.###########.#.#####.#.###.#.#.###.###.#
  #...#.#...#.....#.#.#...#.#.#.#      P     Q       O       P     F   A     M        #...#...#.......#.#.#.#.......#
  ###.#####.###.###.#.#.#####.###      C     V       W       B     F   Y     P        ###.#.#####.#######.#.###.###.#
  #...#.#...#.#.#...#.#.#...#...#                                                     #.....#.....#.#.#...#...#.#....PB
  ###.#.#.###.#####.#.#.###.#.###                                                     #.###.###.###.#.#.###.#####.#.#
  #.#.........#.#.#.............#                                                   MQ..#...........#.#.....#.....#..AA
  #.#.#####.###.#.#####.#.#######                                                     #.#.###.#.#.###.#####.#.###.###
GG....#.#...#...#.....#.#.....#.#                                                     #.#.#...#.#.....#.#.#.#.#.#.#.#
  #.###.#####.#####.#####.#####.#                                                     ###.#######.#####.#.#.###.#.#.#
  #...#...#.#.#.....#.#...#......LE                                                   #.#.#...#.#...................#
  #.#####.#.#.###.###.#.#.#.#.#.#                                                     #.###.###.#####################
SS..#.....#...#...#.....#...#.#..EC                                                 LJ..#...........#...#...#.......#
  #.#.#.###.#.###.###.###.#######                                                     #.#.#.#####.#.#.#.#.###.#.#####
  #...#.....#.........#.#.#.....#                                                     #...#.#.#...#...#...#...#.#....PC
  #####################.###.#.###                                                     #.#####.#####.#.###.#.#.#.###.#
  #.......#...#.........#.#.#...#                                                     #.....#...#...#.#...#.#.#.#...#
  ###.###.#.#.#.###.#.#.#.###.#.#                                                     #.#####.#.#####.###.#.###.#.###
  #.#.#...#.#...#...#.#.#...#.#.#                                                     #...#.#.#...#...#.....#.....#.#
  #.#.#.###.#.#.#####.###.###.#.#                                                     #####.#.#######.#.###.#####.#.#
NW....#...#.#.#.....#.#...#.#.#.#                                                   NW....#.#...#.....#.#...#.#...#.#
  #.#.###.#.#.###.###.###.#.#.#.#                                                     #.###.#.#.###.#.#.#.#.#.#.#.#.#
  #.#.#.....#.#.#.#.#.........#..BB                                                   #.#.#.#.#.#.#.#.#.#.#.#.#.#.#..LE
  ###.#########.###.#############                                                     #.#.#.#.###.###########.#####.#
  #.#.#...................#......LV                                                   #...........#.#...#.#...#.#.#.#
  #.#####.#######.#####.###.#####                                                     #####.#####.#.###.#.#.###.#.#.#
LB............#...#.#...#...#...#                                                     #...#.#.#.....................#
  #.#####.#.#.###.#.###.###.#.#.#                                                     #.#####.###.###################
  #...#...#.#...#.#.#.#.#.#...#.#                                                   UJ........#.#.#.....#...#.......#
  #.#####.###.###.#.#.#.#.#####.#                                                     #.###.#.#.###.###.#.#.#.###.#.#
  #...#.....#.#...#.#.#.........#                                                     #...#.#.........#...#.....#.#.#
  ###.#.#######.###.#.#######.#.#                                                     #.###.#####.###.#.#.#######.#.#
  #...#.#.#...#.#.#.......#...#.#                                                     #...#.#.#...#...#.#.#...#.#.#..BB
  #.#.###.#.#####.#.#.###.#######                                                     #######.#######.#.#####.#.#####
  #.#...#.#.#.#.#.#.#...#...#....GG                                                 JY..#...........#.#...#.....#....CD
  #######.#.#.#.#.#.#####.#####.#                                                     #.###.###.###.#########.#.###.#
AY..#.#...#.#.#.......#...#.#...#                                                     #.#.#.#.....#.#.#.#.....#.#...#
  #.#.###.#.#.#.#.#.#####.#.#.###                                                     #.#.#.#####.###.#.###.#.#.#.#.#
  #.............#.#...#.#.....#.#                                                     #.......#...#.....#.#.#.#...#.#
  ###########.#####.###.#.#.###.#                                                     #####.###.#####.###.###.###.###
  #.........#...#...#...#.#.#.#.#                                                     #.#...#.................#.#.#.#
  #####.###.#########.#######.#.#                                                     #.#######.#.#.#####.#####.#.#.#
  #.....#...#.#.#.#.....#...#.#..LB                                                   #...#.#.#.#.#...#.....#...#.#.#
  #.#.#.#.###.#.#.###.#####.#.#.#                                                     #.#.#.#.#####.#####.###.#.###.#
DD..#.#.#.#...#...#.#.#.......#.#                                                     #.#.........#.#.#...#.#.#.#...#
  #.#####.#.#.#.###.#.###.###.#.#                                                     #.###.#########.#####.#.#.#.#.#
  #...#.....#...............#...#                                                   DD..#.....#.#.#.#.#.....#.#.#.#..UJ
  ###.###########################                                                     ###.#####.#.#.#.#.#.###.#.#.###
  #.#.#...#.........#...........#                                                     #.................#.....#.....#
  #.###.#.#.#######.#.#####.#####                                                     #.#.#.#.###############.#######
  #.....#...#...#...#.#.#...#....GK                                                   #.#.#.#.#.........#.#.#.#.....#
  #.#.#########.###.#.#.#.###.###                                                     #########.#####.###.#.###.###.#
  #.#.....#.............#.....#.#                                                   LW..#...#.....#.........#...#....LV
  #.###.#.###.#.#.#.###.#.#.#.#.#                                                     #.#.###.#.#.###.#.###.#.###.###
JY..#.#.#...#.#.#.#...#.#.#.#...#                                                     #.....#.#.#...#.#.#...#.#...#..ZZ
  #.#.###.###.#.###.###.###.#####                                                     #.###.#.###.#######.###.#.###.#
  #.....#.#.#.#...#...#...#.....#                                                     #...#.....#.#...........#.....#
  #.#.#####.#.#####.###.###.#.###      A       N           C       S X     W          #.#####.#######.#.###.#.#####.#
  #.#...#.....#.......#...#.#.#.#      L       G           D       S Z     F          #.#...........#.#.#...#.#.....#
  ###.###.#.#.###.#.###.#.###.#.#######.#######.###########.#######.#.#####.###########.###.#.#.#.###.#.###.#######.#
  #.....#.#.#.#...#.#...#.#.....#...........#.........#...#.#.......#.....#.....#...#.#...#.#.#.#.#.#.#.#.....#.#...#
  ###.#.#####.#.###.#.#.#.###.#.#.#.###.###.###.###.###.###.#.###########.#.#####.###.###.###.#####.###.###.#.#.###.#
  #...#...#...#...#.#.#.#.#...#.#.#...#...#.#.#.#...#.......#...........#.#.#.#.......#.....#...#.......#...#...#...#
  ###.#######.#.#.###.###.###.#########.###.#.#####.###.###.#.#.#.###.###.#.#.#.#.#.#.#######.#########.###.#.#####.#
  #.#...#...#.#.#.#...#.#.#.........#.#.#.....#.#.#.#.....#.#.#.#.#.#...#.#.....#.#.#.#.......#...........#.#.#.....#
  #.#.#####.#.###.#.#.#.#############.#####.###.#.#.#.#######.#####.#####.#####.#########.#.#.#########.###.#######.#
  #.......#.....#.#.#.#.#...#.#.#.#...#.#.......#...#...#.#.#...#.........#.............#.#.#.#...#.......#...#.#...#
  ###.#####.#####.#####.###.#.#.#.###.#.#.###.#####.#.#.#.#.#.###########.#.#############.#.#.###.###.###.###.#.#.#.#
  #.....#.......#.#.......#.......#.........#.#.#...#.#...#.........#.....#...........#.#.#.#.#.#.....#.#.#...#...#.#
  ###.###.#.###.#.###.#######.###.#.#######.###.###.###.#########.#######.###.#########.#####.#.#.#.#.#.###.###.#.#.#
  #.....#.#.#.#.#.#.#...#.#.#.#.....#...#.....#.......#...#.#.......#.#.#.#.#...#...#.#...#...#...#.#...#.#...#.#.#.#
  ###.#######.#####.###.#.#.#######.###.###.#######.###.#.#.#.#######.#.#.#.###.#.###.#.#####.#####.#.#.#.#####.#.#.#
  #.......#.................#.....#.#.#.#.....#.....#.#.#...#.......#.......#.#...#.......#.....#...#.#.......#.#.#.#
  #.#.#############.###.#.#.#.#.#.###.#.#.#####.#.###.###.#.#.#.#####.###.#.#.#.###.#####.###.###.#####.#.###.#.###.#
  #.#.........#...#...#.#.#...#.#...#.#.#.....#.#.....#...#.#.#.#...#.#...#.#.......#...#.#.....#...#...#...#.#.#...#
  #.###.#######.#.#.###############.#.#.#.#.#######.#######.#.###.#######.#####.#.###.#################.#########.#.#
  #.#.....#.....#.#.#...#...#.............#.#.........#.....#.....#.........#.#.#.....#.#.......#.......#.#.#.#.#.#.#
  ###.###########.#####.###.###.#.#.#.###########.#.#######.###.#.###.#.#####.###.#.###.#####.#.#######.#.#.#.#.#####
  #.......#...#.#...#.....#.#...#.#.#...#.....#...#.....#...#...#.#...#...#...#.#.#.#.#...#...#.#.....#...#.#.....#.#
  #.#.#######.#.#.#######.#.#######.#.#.#.#.#.#.###.#######.#.###########.#.###.#.###.#.#####.###.#.#.###.#.#.#.###.#
  #.#.....#.......#...#.#...#.#.#...#.#...#.#.#.#.....#...#.#.....#.#.........#...#.....#.....#.#.#.#.#.......#.....#
  #.#.###.#######.#.###.###.#.#.###########.#####.#####.###.###.#.#.#.#####.###.#####.#######.#.#.#######.#####.###.#
  #.#...#.....#.......#...........#.#.....#.#.......#...#...#...#.#.......#.#.......#.#.#.#...#...#.#...#.#...#.#...#
  #.#####.#######.###.#.#.###.###.#.###.#.#.#.###.###.#.#.###.#########.#.#######.###.#.#.###.#.###.#.#####.#####.#.#
  #.#.......#.....#.....#.#...#.........#...#...#.#.#.#.#...#.......#...#.......#.....#.#.......#...#.#.#...#...#.#.#
  #.#########.#.#.#############.#.###.#####.###.#.#.#.#.#.#.#####.#######.#.#####.#.#.#.#.###.#.###.#.#.###.#.#####.#
  #.#.#.#.....#.#...#.....#.....#.#.......#.#...#.#...#...#.#.........#...#.#...#.#.#...#...#.#...........#.......#.#
  ###.#.#########.###.#####.###.#####.###.###.#######.#############.#####.###.#.#.#####.#.#.###.#######.###.#.###.###
  #...............#.........#...#.....#...#.......#...........#.....#.....#...#.......#...#...#.....#.......#...#...#
  #####################################.#########.#####.#########.#####.#####.#######################################
                                       X         E     A         M     L     G
                                       Z         C     L         P     J     K                                         "
    )
}
