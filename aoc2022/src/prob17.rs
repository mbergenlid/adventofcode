use std::fmt::Debug;
use crate::prob17::StreamJet::{Left, Right};

#[derive(Eq, PartialEq)]
struct Pos {
    x: u32,
    y: u32,
}


struct Block {
    points: Vec<Pos>,
}

impl Block {

    fn shape_1(left: u32, bottom: u32) -> Block {
        Block {
            points: vec![Pos { x: left, y: bottom }, Pos { x: left+1, y: bottom }, Pos { x: left+2, y: bottom }, Pos { x: left+3, y: bottom }]
        }
    }

    fn shape_2(left: u32, bottom: u32) -> Block {
        Block {
            points: vec![Pos { x: left+1, y: bottom+2 }, Pos { x: left, y: bottom+1 }, Pos { x: left+1, y: bottom+1 }, Pos { x: left+2, y: bottom+1 }, Pos { x: left+1, y: bottom }]
        }
    }

    fn shape_3(left: u32, bottom: u32) -> Block {
        Block {
            points: vec![Pos { x: left+2, y: bottom+2 }, Pos { x: left+2, y: bottom+1 }, Pos { x: left, y: bottom }, Pos { x: left+1, y: bottom }, Pos { x: left+2, y: bottom }]
        }
    }

    fn shape_4(left: u32, bottom: u32) -> Block {
        Block {
            points: vec![Pos { x: left, y: bottom+3 }, Pos { x: left, y: bottom+2 }, Pos { x: left, y: bottom+1 }, Pos { x: left, y: bottom }]
        }
    }

    fn shape_5(left: u32, bottom: u32) -> Block {
        Block {
            points: vec![Pos { x: left, y: bottom+1 }, Pos { x: left+1, y: bottom+1 }, Pos { x: left, y: bottom }, Pos { x: left+1, y: bottom }]
        }
    }

    fn move_down(&self) -> Block {
        Block {
            points: self
                .points
                .iter()
                .map(|Pos { x, y }| Pos { x: *x, y: y - 1 })
                .collect(),
        }
    }

    fn move_left(&self) -> Block {
        Block {
            points: self
                .points
                .iter()
                .map(|Pos { x, y }| Pos { x: x - 1, y: *y })
                .collect(),
        }
    }

    fn move_right(&self) -> Block {
        Block {
            points: self
                .points
                .iter()
                .map(|Pos { x, y }| Pos { x: x + 1, y: *y })
                .collect(),
        }
    }

    fn hit_wall_right(&self) -> bool {
        self.points.iter().any(|p| p.x == 0)
    }

    fn hit_wall_left(&self) -> bool {
        self.points.iter().any(|p| p.x == 8)
    }

    fn hit_floor(&self) -> bool {
        self.points.iter().any(|p| p.y == 0)
    }

    fn hit_any_other_block(&self, others: &Vec<[bool; 8]>) -> bool {
        self.points.iter().any(|p| others.get((p.y - 1) as usize).map(|row| row[p.x as usize]).unwrap_or(false))
    }

    fn stop(self, cave: &mut Vec<[bool; 8]>) {
        for p in self.points {
            if cave.len() < p.y as usize {
                for _ in 0..((p.y as usize) - cave.len()) {
                    cave.push([false; 8]);
                }
            }
            cave[(p.y-1) as usize][p.x as usize] = true;
        }
    }
}


#[derive(Debug)]
enum StreamJet {
    Left, Right
}


pub fn solve_part_1(input: &str) -> usize {
    let jets = input.chars().map(|c| {
        match c {
            '>' => Right,
            '<' => Left,
            _ => panic!("Unknown yet")
        }
    }).collect::<Vec<_>>();

    let all_blocks: Vec<Box<dyn Fn(u32, u32) -> Block>> = vec![
        Box::new(Block::shape_1),
        Box::new(Block::shape_2),
        Box::new(Block::shape_3),
        Box::new(Block::shape_4),
        Box::new(Block::shape_5),
    ];

    let mut cave: Vec<[bool; 8]> = Vec::new();
    let mut top = 0_u32;
    let mut jet_iterator = jets.iter().cycle();
    let mut last_height = 0;
    for round in 0..10000 {
        let mut block = all_blocks[round % 5](3, top + 4);
        // if round > 0 && round % 5 == 0 && jet_count % jets.len() == 0 {
        //     println!("Cycle {}", round);
        //     break;
        // }

        let current_height = cave.iter().enumerate().rev().find(|(_, row)| row.contains(&true)).map(|(i, _)| i + 1).unwrap_or(0);
        print!("{}", current_height - last_height);
        last_height = current_height;
        let mut jets_used = Vec::new();
        loop {
            let new_block = match jet_iterator.next().unwrap() {
                Left => {jets_used.push(Left); block.move_left()},
                Right => {jets_used.push(Right);block.move_right()},
            };

            if !(new_block.hit_wall_right() || new_block.hit_wall_left() || new_block.hit_any_other_block(&cave)) {
                block = new_block;
            }

            let new_block_2 = block.move_down();

            if new_block_2.hit_floor() || new_block_2.hit_any_other_block(&cave) {
                block.stop(&mut cave);
                top = cave.iter().enumerate().rev().find(|(_, row)| row.contains(&true)).map(|(i, _)| i + 1).unwrap_or(0) as u32;
                // println!("============ Round {} ===========", round);
                // println!("Jets used {:?}", jets_used);
                // print_cave(&cave);
                // println!("==========================");
                break;
            } else {
                block = new_block_2;
            }
        }
    }

    println!();
    // println!("{}", cave.len());
    // print_cave(&cave);
    cave.iter().enumerate().rev().find(|(_, row)| row.contains(&true)).map(|(i, _)| i + 1).unwrap_or(0)
}

pub fn solve_part_2(_input: &str) -> usize {
    
    let start = [1,3,3,0,0,1,3,3,2,2,1,2,2,2,2,1,3,3,4,2,0,0,3,2,0,1,3,2,2,0,1,3,2,1,1,1,3,3,2,0,1,3,3,0,0,1,3,3,4,2,0,3,3,2,0,1,3,3,2,2,1,2,2,4,2,1,3,3,2,0,1,3,0,3,0,1,3,3,0,0,1,3,3,4,0,0,2,2,4,0,1,2,1,2,2,0,3,3,2,0,1,3,2,4,0,0,2,0,0,2,1,3,3,0,0,1,3,2,0,0,0,1,3,4,0,0,2,3,2,2,1,3,2,4,0,1,3,3,0,2,1,3,3,2,2,1,3,3,0,0,1,2,3,2,0,1,3,3,2,0,1,2,2,4,0,1,3,3,0,0,1,3,2,2,2,1,3,3,0,0,1,3,0,4,0,1,2,2,4,0,0,2,2,4,0,0,2,0,3,2,1,1,3,0,2,1,3,3,0,0,1,2,1,3,0,0,3,0,3,0,1,2,1,2,2,1,3,2,0,1,1,2,1,1,0,1,3,2,0,0,0,3,2,1,0,0,3,3,0,2,1,2,1,2,0,1,3,0,4,0,1,2,3,0,0,1,3,2,2,2,1,3,3,2,0,1,3,0,4,0,1,3,2,4,2,1,3,3,0,0,1,2,3,0,1,0,3,3,2,0,1,3,3,0,0,1,2,1,0,0,0,3,2,2,2,1,3,3,2,0,1,3,3,0,0,1,3,2,2,0,1,3,2,4,0,1,0,3,2,2,0,3,3,0,0,1,3,3,2,2,1,3,0,0,1,1,3,3,2,2,1,3,3,0,0,0,2,3,0,0,1,3,3,0,0,1,3,3,0,0,1,3,3,0,0,1,1,3,0,2,1,3,2,1,2,1,3,3,2,0,1,2,3,0,0,1,3,2,0,0,1,3,3,0,0,1,3,2,4,0,1,3,2,2,0,1,3,2,2,0,1,3,3,0,2,1,3,2,0,0,1,3,3,2,0,1,0,3,4,0,1,2,2,4,0,1,3,0,4,0,1,2,3,2,0,1,2,3,2,0,1,3,3,4,0,1,3,3,0,2,0,0,3,1,0,0,3,2,1,1,1,3,3,2,0,1,2,1,2,0,1,3,3,0,0,1,3,3,2,2,1,3,2,4,2,1,2,3,2,2,1,3,2,4,2,1,2,2,2,0,1,2,3,0,0,1,3,3,0,2,1,2,1,3,0,1,3,2,0,0,1,2,1,2,0,0,3,3,2,2,1,2,3,0,0,1,3,2,2,0,1,2,3,0,0,1,3,2,1,2,1,3,3,2,2,1,2,3,4,2,1,3,2,2,2,1,3,2,2,0,1,3,2,4,0,1,3,3,4,0,1,2,3,2,0,1,3,3,4,0,1,2,2,0,0,1,3,2,4,2,1,1,2,1,0,1,3,2,0,0,1,3,2,0,0,0,2,3,0,0,1,3,0,2,0,1,2,2,0,2,0,2,0,2,0,1,2,2,2,0,1,3,3,4,2,0,0,3,2,2,1,3,2,0,0,0,3,2,2,2,1,3,0,3,0,1,2,3,0,2,1,2,2,1,1,1,3,2,1,2,1,1,2,1,2,1,3,2,2,0,1,2,3,0,0,1,2,2,4,0,0,0,3,4,2,1,3,3,2,2,1,3,3,2,0,0,2,3,0,0,1,2,1,2,0,1,2,3,2,0,1,3,2,1,0,1,3,3,2,2,1,3,3,2,2,1,3,3,0,0,0,2,3,2,0,0,2,3,2,0,0,2,3,0,0,0,3,2,4,2,1,0,3,2,0,1,3,3,0,0,0,2,2,2,0,0,2,2,1,0,0,2,3,0,2,1,1,2,2,0,1,3,2,4,0,1,3,3,4,2,1,0,3,0,0,1,3,2,1,1,1,3,3,2,0,0,2,3,0,0,1,3,0,3,0,1,2,2,2,0,1,0,2,4,0,0,0,3,0,0,1,3,0,3,2,1,2,1,3,2,0,2,3,2,2,1,3,3,2,0,1,3,3,0,2,0,3,2,2,2,1,3,3,2,2,1,2,3,2,0,0,2,2,4,0,1,3,3,0,0,1,3,0,4,0,0,2,0,0,2,0,2,2,0,2,1,3,3,0,0,1,3,2,2,2,1,3,3,2,0,1,2,3,0,0,1,3,2,2,0,0,2,2,0,2,1,2,3,2,0,1,3,3,0,0,1,3,2,2,2,1,2,2,2,0,0,2,3,4,0,0,0,3,2,0,1,0,3,2,0,1,0,2,2,0,1,2,3,4,0,0,2,0,0,0,0,3,3,2,2,0,2,3,0,0,1,3,2,4,0,1,3,2,4,0,0,2,0,0,2,1,3,3,0,2,0,2,3,4,0,0,2,2,4,2,1,3,2,2,2,1,3,2,0,0,1,3,2,2,2,1,3,2,4,0,1,3,2,0,0,1,3,2,2,0,1,3,2,1,2,1,3,2,0,0,1,3,3,0,0,1,2,1,3,0,1,2,3,4,2,1,3,2,2,0,0,2,3,0,0,1,2,3,4,0,0,0,3,2,0,1,3,3];
    let cycle = [0,0,1,3,3,4,0,0,3,3,0,2,1,3,3,2,2,1,2,2,2,2,1,1,3,0,2,1,2,1,2,2,1,2,2,1,2,0,1,2,2,0,0,2,1,3,2,0,2,3,2,0,1,3,2,2,0,1,3,2,1,0,0,3,3,2,2,1,3,0,4,0,1,3,2,4,2,1,3,3,4,0,1,2,1,2,2,0,0,3,0,0,1,3,2,4,2,1,3,2,1,0,0,2,3,2,0,1,3,3,0,0,1,3,2,1,2,1,2,1,2,0,0,3,3,0,0,0,1,2,1,2,1,3,2,4,2,1,3,2,2,0,0,1,2,2,0,1,3,3,2,0,1,2,3,4,2,1,3,2,2,0,1,3,3,0,2,1,3,3,2,0,1,2,2,0,0,1,2,1,2,0,1,3,3,2,0,1,2,2,0,0,1,3,0,1,2,1,3,2,2,0,1,3,2,1,0,1,3,2,4,2,1,3,2,1,1,0,3,0,2,0,0,3,3,0,0,0,2,3,0,0,1,2,3,0,2,1,3,2,1,1,0,3,2,1,0,1,2,3,4,0,1,0,3,0,0,0,1,3,0,0,1,3,3,0,0,1,2,1,2,0,0,3,2,2,2,1,2,1,2,0,1,3,2,1,1,1,3,2,2,2,1,3,2,0,0,0,3,3,2,2,0,2,3,2,2,1,3,3,0,0,1,3,3,2,0,1,3,2,0,0,1,3,3,0,2,0,3,0,1,0,0,3,0,2,2,1,2,3,0,1,1,2,2,0,0,1,3,2,2,2,1,2,3,0,0,1,0,3,4,2,1,3,2,1,2,1,3,0,3,2,1,3,3,2,0,1,3,0,2,0,1,3,3,4,0,1,3,3,4,2,1,3,3,4,0,1,3,2,2,0,1,3,3,2,0,1,3,3,0,2,1,2,1,2,2,1,3,3,2,0,1,3,2,4,0,1,2,3,0,1,0,3,3,4,0,1,3,2,4,0,1,3,3,0,0,1,2,1,4,0,1,3,3,2,2,1,2,1,3,2,0,3,0,0,1,1,1,2,4,0,1,3,2,0,0,1,2,3,2,0,1,3,3,0,0,1,2,3,2,2,0,2,2,0,2,0,3,3,0,0,0,2,1,2,0,1,2,1,2,0,1,3,0,4,0,1,2,2,4,0,1,2,1,2,0,0,2,2,1,1,1,3,2,2,0,1,3,3,2,2,1,2,3,0,1,1,3,3,0,2,0,2,3,0,2,1,3,2,4,2,1,3,3,0,0,1,3,0,4,0,1,0,3,1,1,1,3,3,2,0,1,2,1,0,2,1,3,3,0,0,0,2,2,2,0,1,3,2,4,2,1,2,3,4,0,1,2,2,2,0,0,2,3,2,0,1,3,2,4,2,1,2,1,4,0,1,3,3,4,0,0,0,3,0,0,1,1,2,1,2,1,3,2,1,0,0,3,2,2,2,1,3,2,4,0,1,3,3,2,0,1,3,0,3,2,1,3,3,4,0,0,0,3,0,1,0,3,0,2,0,1,3,3,0,0,1,3,3,0,2,1,2,3,0,0,1,3,3,2,0,1,0,3,0,0,1,2,1,2,0,0,3,3,0,2,1,3,3,2,0,1,3,2,2,2,1,2,3,0,1,0,3,2,0,0,1,3,2,1,2,1,2,3,0,0,1,3,3,0,0,1,2,1,2,0,1,2,1,2,0,1,3,2,2,0,0,2,3,2,0,1,3,2,4,2,1,3,2,2,2,1,2,1,2,2,1,3,2,0,2,0,0,3,1,0,0,3,2,2,0,1,3,2,2,0,1,2,3,0,0,1,1,2,2,2,1,3,3,2,2,1,3,3,0,0,1,2,3,2,0,1,0,3,0,0,0,2,3,0,0,1,3,3,4,0,0,0,3,0,0,1,3,3,0,0,0,2,0,2,0,1,3,3,0,2,1,3,2,2,0,1,3,3,2,0,1,3,0,3,0,0,3,3,0,0,1,3,0,1,2,0,3,0,2,0,1,3,2,2,0,1,2,1,2,0,1,3,0,2,0,1,2,1,3,0,1,2,1,2,0,1,2,2,2,0,1,3,3,4,0,1,3,3,0,2,1,1,2,1,0,1,2,3,0,2,1,3,0,4,0,1,3,3,0,2,1,3,2,2,0,1,3,3,2,2,1,2,3,4,0,1,3,2,2,0,0,1,2,2,2,0,0,3,0,2,0,2,3,0,0,1,3,2,2,0,1,3,2,2,0,1,3,3,2,2,1,3,2,2,0,1,2,1,2,0,1,3,3,2,0,1,3,3,4,0,1,3,2,0,2,1,3,2,0,2,1,3,3,0,0,0,2,3,0,0,1,3,2,2,2,1,3,3,2,0,1,3,0,3,0,0,2,3,0,0,1,3,3,2,2,1,2,1,2,2,1,0,0,2,2,1,2,3,0,0,1,2,3,2,0,1,3,3,0,0,1,3,3,0,0,1,2,3,4,0,1,3,3,2,0,1,3,2,2,2,1,3,2,0,0,1,3,3,4,2,1,2,1,2,0,1,2,2,2,2,1,3,2,0,0,0,2,2,4,0,1,2,3,2,0,1,3,3,0,0,1,3,3,2,0,1,3,3,2,2,1,3,3,2,2,1,3,2,0,0,0,3,3,0,2,0,3,0,0,2,1,3,2,0,1,1,3,3,0,0,1,2,3,2,2,1,2,3,4,2,1,3,2,2,2,1,3,2,2,0,1,3,2,4,0,1,3,3,4,0,1,2,3,2,0,1,3,3,4,0,1,2,2,0,0,1,3,2,4,2,1,1,2,1,0,1,3,2,0,0,1,3,2,0,0,0,2,3,0,0,1,3,0,2,0,1,2,2,0,2,0,2,0,2,0,1,2,2,2,0,1,3,3,4,2,0,0,3,2,2,1,3,2,0,0,0,3,2,2,2,1,3,0,3,0,1,2,3,0,2,1,2,2,1,1,1,3,2,1,2,1,1,2,1,2,1,3,2,2,0,1,2,3,0,0,1,2,2,4,0,0,0,3,4,2,1,3,3,2,2,1,3,3,2,0,0,2,3,0,0,1,2,1,2,0,1,2,3,2,0,1,3,2,1,0,1,3,3,2,2,1,3,3,2,2,1,3,3,0,0,0,2,3,2,0,0,2,3,2,0,0,2,3,0,0,0,3,2,4,2,1,0,3,2,0,1,3,3,0,0,0,2,2,2,0,0,2,2,1,0,0,2,3,0,2,1,1,2,2,0,1,3,2,4,0,1,3,3,4,2,1,0,3,0,0,1,3,2,1,1,1,3,3,2,0,0,2,3,0,0,1,3,0,3,0,1,2,2,2,0,1,0,2,4,0,0,0,3,0,0,1,3,0,3,2,1,2,1,3,2,0,2,3,2,2,1,3,3,2,0,1,3,3,0,2,0,3,2,2,2,1,3,3,2,2,1,2,3,2,0,0,2,2,4,0,1,3,3,0,0,1,3,0,4,0,0,2,0,0,2,0,2,2,0,2,1,3,3,0,0,1,3,2,2,2,1,3,3,2,0,1,2,3,0,0,1,3,2,2,0,0,2,2,0,2,1,2,3,2,0,1,3,3,0,0,1,3,2,2,2,1,2,2,2,0,0,2,3,4,0,0,0,3,2,0,1,0,3,2,0,1,0,2,2,0,1,2,3,4,0,0,2,0,0,0,0,3,3,2,2,0,2,3,0,0,1,3,2,4,0,1,3,2,4,0,0,2,0,0,2,1,3,3,0,2,0,2,3,4,0,0,2,2,4,2,1,3,2,2,2,1,3,2,0,0,1,3,2,2,2,1,3,2,4,0,1,3,2,0,0,1,3,2,2,0,1,3,2,1,2,1,3,2,0,0,1,3,3,0,0,1,2,1,3,0,1,2,3,4,2,1,3,2,2,0,0,2,3,0,0,1,2,3,4,0,0,0,3,2,0,1,3,3];

    let mut height = start.iter().sum::<usize>();
    let cycle_height = cycle.iter().sum::<usize>();

    let cycle_length = cycle.len();
    let start_length = start.len();

    let num_cycles = (1000000000000 - start_length)/cycle_length;

    let total_iterations = start_length + num_cycles*cycle_length;

    height += num_cycles*cycle_height;
    for &i in cycle.iter().take(1000000000000-total_iterations) {
        height += i;
    }

    height
}

#[allow(unused)]
fn print_cave(cave: &Vec<[bool; 8]>) {
    for row in cave.iter().rev() {
        print!("|");
        for &c in row.iter().skip(1) {
            if c {
                print!("#");
            } else {
                print!(".");
            }
        }
        println!("|");
    }
}

#[cfg(test)]
mod test {
    use crate::prob17::solve_part_1;

    #[test]
    fn test_1() {
        assert_eq!(solve_part_1(INPUT), 3068);
    }

    const INPUT: &'static str = ">>><<><>><<<>><>>><<<>>><<<><<<>><>><<>>";
}